#!/usr/bin/env node

'use strict';
const parse = require('xdr-tools').XdrParser,
      path = require('path'),
      fs = require('fs');

if (process.argv.length !== 3) {
  console.log('usage: gen-api <path>');
  process.exit(1);
}

function upperFirst(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
}

function toCamelCase(str, sep) {
  sep = sep || '_';
  return str.split(sep).map((x, i) => i !== 0 ? upperFirst(x) : x).join('');
}

function toSnakeCase(str) {
  return str.replace(/([A-Z])/g, '_$1').replace(/^_/, '').toLowerCase();
}

const CREATE_METHODS = [
  'createXml', 'createXmlWithFiles'
];

const LOOKUP_METHODS = [
  'lookupByName', 'lookupById', 'lookupByUuid', 'lookupByKey', 'lookupByPath',
  'lookupByMacString', 'lookupByUsage', 'lookupByVolume'
];

const specPath = process.argv[2];
const input = fs.readFileSync(specPath, 'utf-8');
const result = parse(input.toString());
const structs = result.value.filter(r => r.type === 'struct');
const methods = structs.filter(s => s.name.endsWith('_args') || s.name.endsWith('_ret'));
const api = methods.reduce((def, method) => {
  let suffix = method.name.endsWith('_args') ? '_args' : '_ret';
  let altSuffix = method.name.endsWith('_args') ? '_ret' : '_args';
  let methodBits = method.name.replace('remote_', '').replace(suffix, '').split('_');
  let procName = 'REMOTE_PROC_' + methodBits.map(b => b.toUpperCase()).join('_');
  let section = methodBits.shift();
  if (section === 'storage') { section += '_' + methodBits.shift(); }
  if (section === 'node') {
    if (methodBits[0] === 'device') section += '_' + methodBits.shift();
    else section += '_device';  // legacy naming scheme
  }

  if (!def.hasOwnProperty(section)) def[section] = {};
  let methodName =
    methodBits.map((bit, idx) => idx !== 0 ? upperFirst(bit) : bit).join('');

  let lookupType;
  if (LOOKUP_METHODS.indexOf(methodName) !== -1 ||
      CREATE_METHODS.indexOf(methodName) !== -1) {
    methodBits.splice(1, 0, className(section));
    methodName =
      methodBits.map((bit, idx) => idx !== 0 ? upperFirst(bit) : bit).join('');
    lookupType = className(section);
    section = (section === 'storage_vol') ? 'storage_pool' : 'connect';
  }

  if (def[section].hasOwnProperty(methodName)) {
    // already processed this method, bail
    return def;
  }

  def[section][methodName] = { proc: procName };
  def[section][methodName][suffix.substring(1)] = method;
  if (!!lookupType) def[section][methodName].lookupType = lookupType;

  let pairName = method.name.replace(suffix, altSuffix);
  const pairMethods = structs.filter(s => s.name === pairName);
  def[section][methodName][altSuffix.substring(1)] =
    (pairMethods.length) ? pairMethods[0] : null;
  return def;
}, {});

function className(moduleName) { return upperFirst(toCamelCase(moduleName)); }
function generateClassDefinition(moduleName, def) {
  let out = '';
  out += `class ${className(moduleName)} {\n`;

  if (moduleName === 'connect') {
    out += '  constructor() {}\n';
  } else {
    out += '  constructor(conn, attr) {\n';
    out += '    this.conn = conn;\n';
    out += `    this.ref = new rp.remote_${moduleName}(attr);\n`;
    out += '  }\n';
  }
  out += '}\n\n';
  return out;
}

function isRef(module, param) {
  return (module === 'domain' && param === 'dom') ||
         (module === 'interface' && param === 'iface') ||
         (module === 'network' && param === 'net') ||
         (module === 'nwfilter' && param === 'nwfilter') ||
         (module === 'secret' && param === 'secret') ||
         (module === 'storage_pool' && param === 'pool') ||
         (module === 'storage_vol' && param === 'vol');
}

function generateMethodDefinition(module, methodName, def) {
  let out = '';
  let procName = def.proc;
  let methodArgs = def.args;
  let methodReturn = def.ret;
  let lookupType = def.lookupType;

  let signatureBits = [];
  if (methodArgs) {
    signatureBits = methodArgs.members.map(m => toCamelCase(m.name));
    if (isRef(module, signatureBits[0])) signatureBits.shift();
  }
  signatureBits.push('callback');
  let signature = signatureBits.join(', ');

  out += '/**\n *\n';
  if (methodArgs) {
    methodArgs.members.map(m => { out += ` * @param ${toCamelCase(m.name)}\n`; });
  }
  out += ' * @param [callback]\n';
  out += ' */\n';
  out += `${className(module)}.prototype.${methodName} = function(${signature}) {\n`;

  if (methodArgs) {
    out += `  let args = new rp.${methodArgs.name}({\n`;
    out += (methodArgs.members.reduce((r, m) => {
      if (isRef(module, m.name)) {
        r.push(`    ${toCamelCase(m.name)}: this.ref`);
      } else {
        r.push(`    ${toCamelCase(m.name)}: ${toCamelCase(m.name)}`);
      }

      return r;
    }, []).join(',\n'));
    out += '\n  });\n\n';
  }

  let maybeArgs = (!!methodArgs) ? 'args.toXDR()' : 'null';
  out += '  let promise = new Promise((resolve, reject) => {\n';
  out += '    let cb = (e, r) => (e) ? reject(e) : resolve(r);\n';

  if (module === 'connect') {
    out += `    this.request(proc.${procName}(), ${maybeArgs}, (err, payload) => {\n`;
  } else {
    out += `    this.conn.request(proc.${procName}(), ${maybeArgs}, (err, payload) => {\n`;
  }

  out += '      if (err) { cb(err, null); return; }\n';

  if (methodReturn) {
    out += `      let result = rp.${methodReturn.name}.fromXDR(payload);\n`;
    out += `      result = result.hasOwnProperty('_attributes') ? result._attributes : result;\n`;
    if (lookupType) {
      out += `      cb(null, new ${lookupType}(this, result));\n`;
    } else {
      out += '      cb(null, result);\n';
    }
  } else {
    out += '      cb();\n';
  }
  out += '    });\n';
  out += '  });\n\n';
  out += '  return promise.asCallback(callback);\n';
  out += '};\n\n';

  return out;
}

function generateImports(requiredModules) {
  let out = '';
  out += "'use strict';\nconst rp = require('./protocol').remote;\nconst proc = rp.remote_procedure;\n";
  for (let module of requiredModules) {
    out += `const ${upperFirst(toCamelCase(module))} = require('${module}');\n`;
  }

  out += '\n';
  return out;
}

for (let module in api) {
  let generated = '';
  generated += generateClassDefinition(module, api[module]);

  let requiredModules = new Set();
  for (let method in api[module]) {
    generated += generateMethodDefinition(module, method, api[module][method]);
    if (api[module][method].lookupType) {
      requiredModules.add(toSnakeCase(api[module][method].lookupType));
    }
  }

  let stream = fs.createWriteStream(path.resolve('..', `lib/${module}.js`));
  generated = generateImports(requiredModules) + generated;
  stream.write(generated);
}
